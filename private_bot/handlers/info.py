from aiogram import Router
from aiogram.types import Message
from aiogram.filters import Command
from sqlalchemy.ext.asyncio import AsyncSession
from db import get_user_by_telegram_id
from utils.subscription_manager import check_subscription_status
import logging

logger = logging.getLogger(__name__)
router = Router()

@router.message(Command("info"))
async def cmd_info(message: Message, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /info"""
    try:
        user = await get_user_by_telegram_id(message.from_user.id, session)
        
        if not user:
            await message.answer(
                "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
            )
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
        is_subscribed, days_left = await check_subscription_status(session, user.id)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
        if is_subscribed:
            subscription_status = f"‚úÖ –ê–∫—Ç–∏–≤–Ω–∞\n‚è≥ –î–Ω–µ–π –æ—Å—Ç–∞–ª–æ—Å—å: {days_left}"
        else:
            subscription_status = "‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω–∞\nüí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /buy –¥–ª—è –ø–æ–∫—É–ø–∫–∏"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        info_message = (
            "üî∞ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ</b>\n\n"
            f"üì± <b>ID:</b> <code>{user.telegram_id}</code>\n"
            f"üë§ <b>–ò–º—è:</b> {user.full_name}\n"
            f"üìß <b>Email:</b> {user.email}\n"
            f"‚òéÔ∏è <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {user.phone}\n\n"
            f"üìä <b>–°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏:</b>\n{subscription_status}\n\n"
            "üìå <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
            "‚Ä¢ /buy - –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É\n"
            "‚Ä¢ /invite - –ü–æ–ª—É—á–∏—Ç—å –∏–Ω–≤–∞–π—Ç-—Å—Å—ã–ª–∫—É\n"
            "‚Ä¢ /info - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ñ–∏–ª–µ"
        )
            
        await message.answer(
            info_message,
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã info: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )