from aiogram import Router, types
from aiogram.filters import Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from sqlalchemy.ext.asyncio import AsyncSession
from db import get_user_by_telegram_id
import logging
import os
from yookassa import Configuration, Payment
from datetime import datetime, timedelta
from utils.subscription_manager import create_subscription

logger = logging.getLogger(__name__)
router = Router()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ÆKassa
SHOP_ID = os.getenv("YOKASSA_SHOP_ID")
SECRET_KEY = os.getenv("YOKASSA_SECRET_KEY")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ü–µ–Ω –ø–æ–¥–ø–∏—Å–æ–∫ (–≤ —Ä—É–±–ª—è—Ö)
SUBSCRIPTION_PRICES = {
    "1_month": 1000,
    "3_months": 2700,
    "6_months": 5000,
    "12_months": 9000
}

def get_subscription_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –ø–æ–¥–ø–∏—Å–∫–∏"""
    keyboard = [
        [
            InlineKeyboardButton(
                text="1 –º–µ—Å—è—Ü - 1000‚ÇΩ",
                callback_data="buy_1_month"
            )
        ],
        [
            InlineKeyboardButton(
                text="3 –º–µ—Å—è—Ü–∞ - 2700‚ÇΩ (—ç–∫–æ–Ω–æ–º–∏—è 10%)",
                callback_data="buy_3_months"
            )
        ],
        [
            InlineKeyboardButton(
                text="6 –º–µ—Å—è—Ü–µ–≤ - 5000‚ÇΩ (—ç–∫–æ–Ω–æ–º–∏—è 17%)",
                callback_data="buy_6_months"
            )
        ],
        [
            InlineKeyboardButton(
                text="12 –º–µ—Å—è—Ü–µ–≤ - 9000‚ÇΩ (—ç–∫–æ–Ω–æ–º–∏—è 25%)",
                callback_data="buy_12_months"
            )
        ]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

@router.message(Command("buy"))
async def cmd_buy(message: Message, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /buy"""
    try:
        user = await get_user_by_telegram_id(message.from_user.id, session)
        if not user:
            await message.answer(
                "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
            )
            return

        await message.answer(
            "üíé –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –ø–æ–¥–ø–∏—Å–∫–∏:\n\n"
            "–ß—Ç–æ –≤–∫–ª—é—á–µ–Ω–æ –≤ –ø–æ–¥–ø–∏—Å–∫—É:\n"
            "‚úÖ –î–æ—Å—Ç—É–ø –∫ –∑–∞–∫—Ä—ã—Ç–æ–º—É –∫–∞–Ω–∞–ª—É\n"
            "‚úÖ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏–Ω–≤–∞–π—Ç-—Å—Å—ã–ª–∫–∏\n"
            "‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7\n",
            reply_markup=get_subscription_keyboard()
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã buy: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.callback_query(lambda c: c.data.startswith('buy_'))
async def process_buy(callback: CallbackQuery, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ –ø–æ–¥–ø–∏—Å–∫–∏"""
    try:
        user = await get_user_by_telegram_id(callback.from_user.id, session)
        if not user:
            await callback.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
            return

        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–∏–æ–¥ –ø–æ–¥–ø–∏—Å–∫–∏ –∏–∑ callback_data
        period = callback.data.replace('buy_', '')
        price = SUBSCRIPTION_PRICES.get(period)
        months = int(period.split('_')[0])

        if not price:
            await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –ø–æ–¥–ø–∏—Å–∫–∏!")
            return

        try:
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ÆKassa
            Configuration.account_id = SHOP_ID
            Configuration.secret_key = SECRET_KEY

            # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
            payment = Payment.create({
                "amount": {
                    "value": str(price),
                    "currency": "RUB"
                },
                "confirmation": {
                    "type": "redirect",
                    "return_url": f"https://t.me/{(await callback.bot.me()).username}"
                },
                "capture": True,
                "description": f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {months} –º–µ—Å—è—Ü(–µ–≤) –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.full_name}",
                "metadata": {
                    "user_id": user.id,
                    "telegram_id": user.telegram_id,
                    "months": months
                }
            })

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ–ø–ª–∞—Ç—ã
            pay_keyboard = InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(
                    text="üí≥ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ",
                    url=payment.confirmation.confirmation_url
                )
            ]])

            await callback.message.edit_text(
                f"üí≥ –°—á–µ—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É:\n\n"
                f"–ü–µ—Ä–∏–æ–¥: {months} –º–µ—Å—è—Ü(–µ–≤)\n"
                f"–°—É–º–º–∞: {price}‚ÇΩ\n\n"
                "–î–ª—è –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá",
                reply_markup=pay_keyboard
            )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞: {e}")
            await callback.message.edit_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–ø–ª–∞—Ç—ã: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.") 