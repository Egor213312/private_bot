from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import Command
from models import User
from database import async_session
from sqlalchemy import select
from datetime import datetime

router = Router()

@router.message(Command("info"))
async def cmd_info(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    async with async_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
        user = await session.execute(
            select(User).where(User.telegram_id == message.from_user.id)
        )
        user = user.scalar_one_or_none()

        if not user:
            await message.answer("‚ÑπÔ∏è –í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
            return

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –ø–æ–¥–ø–∏—Å–∫–∏
        sub_status = "‚ùå –ù–µ –∞–∫—Ç–∏–≤–Ω–∞"
        if user.is_subscribed:
            sub_status = "‚úÖ –ê–∫—Ç–∏–≤–Ω–∞"
            if user.subscription_expires:
                sub_status += f" (–¥–æ {user.subscription_expires.strftime('%d.%m.%Y')}"

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response = (
            f"üìã –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n\n"
            f"üÜî ID: {user.telegram_id}\n"
            f"üë§ –ò–º—è: {user.full_name}\n"
            f"üìß Email: {user.email}\n"
            f"üîê –ü–æ–¥–ø–∏—Å–∫–∞: {sub_status}"
        )

        await message.answer(response)