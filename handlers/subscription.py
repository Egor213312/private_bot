from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession
from utils.subscription_manager import (
    create_subscription,
    check_subscription_status,
    generate_invite_link
)
from models import User, Subscription
from sqlalchemy import select
from db import get_user_by_telegram_id
import logging
from datetime import datetime, timedelta

logger = logging.getLogger(__name__)
router = Router()

def get_subscription_keyboard(user_id: int) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–æ–π"""
    keyboard = [
        [
            InlineKeyboardButton(
                text="1 –º–µ—Å—è—Ü",
                callback_data=f"sub_extend_{user_id}_30"
            ),
            InlineKeyboardButton(
                text="3 –º–µ—Å—è—Ü–∞",
                callback_data=f"sub_extend_{user_id}_90"
            )
        ],
        [
            InlineKeyboardButton(
                text="6 –º–µ—Å—è—Ü–µ–≤",
                callback_data=f"sub_extend_{user_id}_180"
            ),
            InlineKeyboardButton(
                text="1 –≥–æ–¥",
                callback_data=f"sub_extend_{user_id}_365"
            )
        ]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

@router.message(Command("info"))
async def handle_subscription_info(message: Message, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /info"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await get_user_by_telegram_id(message.from_user.id, session)
        if not user:
            await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
        is_active, days_left = await check_subscription_status(session, user.id)
        
        if is_active:
            await message.answer(
                f"‚úÖ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞\n"
                f"–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {days_left}"
            )
        else:
            await message.answer(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /buy –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏."
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ subscription_info: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.message(Command("invite"))
async def handle_invite_request(message: Message, session: AsyncSession):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–Ω–≤–∞–π—Ç-—Å—Å—ã–ª–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    query = select(User).where(User.telegram_id == message.from_user.id)
    result = await session.execute(query)
    user = result.scalar_one_or_none()
    
    if not user:
        await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")
        return
    
    is_active, _ = await check_subscription_status(session, user.id)
    
    if not is_active:
        await message.answer(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /buy –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏."
        )
        return
    
    # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å ID –≤–∞—à–µ–≥–æ –∑–∞–∫—Ä—ã—Ç–æ–≥–æ —á–∞—Ç–∞/–∫–∞–Ω–∞–ª–∞
    CHAT_ID = "YOUR_CHAT_ID"
    
    try:
        invite_link = await generate_invite_link(message.bot, session, user.id, CHAT_ID)
        await message.answer(
            f"üîó –í–∞—à–∞ –∏–Ω–≤–∞–π—Ç-—Å—Å—ã–ª–∫–∞:\n{invite_link}\n\n"
            "‚ö†Ô∏è –°—Å—ã–ª–∫–∞ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è –∏ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ 24 —á–∞—Å–∞."
        )
    except Exception as e:
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–∫–∏.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–Ω–≤–∞–π—Ç-—Å—Å—ã–ª–∫–∏: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã
@router.callback_query(F.data.startswith("payment_success:"))
async def handle_payment_success(callback: CallbackQuery, session: AsyncSession):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É—Å–ø–µ—à–Ω—É—é –æ–ø–ª–∞—Ç—É –ø–æ–¥–ø–∏—Å–∫–∏"""
    user_id = int(callback.data.split(":")[1])
    duration_days = 30  # –∏–ª–∏ –ø–æ–ª—É—á–∞—Ç—å –∏–∑ callback.data
    
    try:
        await create_subscription(session, user_id, duration_days)
        await callback.message.answer(
            "‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
            "1. –ü–æ–ª—É—á–∏—Ç—å –∏–Ω–≤–∞–π—Ç-—Å—Å—ã–ª–∫—É –∫–æ–º–∞–Ω–¥–æ–π /invite\n"
            "2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –∫–æ–º–∞–Ω–¥–æ–π /subscription"
        )
    except Exception as e:
        await callback.message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
    
    await callback.answer()

@router.message(Command("subscription"))
async def cmd_subscription(message: Message, session: AsyncSession):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ –∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø—Ä–æ–¥–ª–µ–Ω–∏—è"""
    try:
        user = await get_user_by_telegram_id(message.from_user.id, session)
        if not user:
            await message.answer(
                "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
            )
            return

        is_active, days_left = await check_subscription_status(session, user.id)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ–¥–ø–∏—Å–æ–∫
        subs_query = select(Subscription).where(Subscription.user_id == user.id).order_by(Subscription.start_date.desc())
        subs_result = await session.execute(subs_query)
        subscriptions = subs_result.scalars().all()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–π –ø–æ–¥–ø–∏—Å–∫–µ
        if is_active:
            current_sub = subscriptions[0] if subscriptions else None
            status_text = (
                f"‚úÖ <b>–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞</b>\n"
                f"‚è≥ –î–Ω–µ–π –æ—Å—Ç–∞–ª–æ—Å—å: {days_left}\n"
                f"üìÖ –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {current_sub.end_date.strftime('%d.%m.%Y')}\n"
                f"üîÑ –ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ: {'–í–∫–ª—é—á–µ–Ω–æ' if current_sub and getattr(current_sub, 'auto_renewal', False) else '–û—Ç–∫–ª—é—á–µ–Ω–æ'}"
            )
        else:
            last_sub = subscriptions[0] if subscriptions else None
            if last_sub:
                status_text = (
                    f"‚ùå <b>–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞</b>\n"
                    f"üìÖ –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å: {last_sub.end_date.strftime('%d.%m.%Y')}"
                )
            else:
                status_text = "‚ùå <b>–£ –≤–∞—Å –µ—â—ë –Ω–µ –±—ã–ª–æ –ø–æ–¥–ø–∏—Å–∫–∏</b>"
            
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ–¥–ø–∏—Å–æ–∫
        history_text = ""
        if subscriptions:
            history_text = "\n<b>üìã –ò—Å—Ç–æ—Ä–∏—è –ø–æ–¥–ø–∏—Å–æ–∫:</b>\n"
            for sub in subscriptions[:3]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 –ø–æ–¥–ø–∏—Å–∫–∏
                duration = (sub.end_date - sub.start_date).days
                history_text += (
                    f"‚Ä¢ {sub.start_date.strftime('%d.%m.%Y')} - {sub.end_date.strftime('%d.%m.%Y')}"
                    f" ({duration} –¥–Ω–µ–π)\n"
                )
        
        message_text = (
            f"üë§ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ</b>\n\n"
            f"{status_text}\n\n"
            f"{history_text}\n"
            "üí´ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã –ø—Ä–æ–¥–ª–µ–Ω–∏—è:</b>"
        )
        
        await message.answer(
            message_text,
            parse_mode="HTML",
            reply_markup=get_subscription_keyboard(user.id)
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–ø–∏—Å–∫–µ: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–ø–∏—Å–∫–µ.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )

@router.callback_query(F.data.startswith("sub_extend_"))
async def process_subscription_extend(callback: CallbackQuery, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏"""
    try:
        _, user_id, days = callback.data.split("_")[1:]
        user_id, days = int(user_id), int(days)                                  
        
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–ø–ª–∞—Ç—ã
        # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.edit_text(
            f"üí≥ –î–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ {days} –¥–Ω–µ–π:\n\n"
            "1. –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ XXX —Ä—É–±–ª–µ–π –Ω–∞ –∫–∞—Ä—Ç—É:\n"
            "<code>1234 5678 9012 3456</code>\n\n"
            "2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É @admin\n"
            "3. –ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞",
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.") 