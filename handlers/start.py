from aiogram import Router, F
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from states import Registration
from models import User
from database import async_session
from sqlalchemy import select
from aiogram.filters import Command

router = Router()

@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º—Å—è.\n–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é:")
    await state.set_state(Registration.full_name)

@router.message(Registration.full_name)
async def process_name(message: Message, state: FSMContext):
    await state.update_data(full_name=message.text)
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à email:")
    await state.set_state(Registration.email)

@router.message(Registration.email)
async def process_email(message: Message, state: FSMContext):
    data = await state.get_data()
    full_name = data["full_name"]
    email = message.text
    telegram_id = message.from_user.id

    async with async_session() as session:
        stmt = select(User).where(User.telegram_id == telegram_id)
        result = await session.execute(stmt)
        user = result.scalar_one_or_none()

        if user:
            user.full_name = full_name
            user.email = email
        else:
            user = User(telegram_id=telegram_id, full_name=full_name, email=email)
            session.add(user)

        await session.commit()

    await message.answer("‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n–î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /buy")
    await state.clear()

@router.message(Command("info"))
async def cmd_info(message: Message):
    telegram_id = message.from_user.id

    async with async_session() as session:
        stmt = select(User).where(User.telegram_id == telegram_id)
        result = await session.execute(stmt)
        user = result.scalar_one_or_none()

        if user:
            status = "‚úÖ –ê–∫—Ç–∏–≤–Ω–∞" if user.is_subscribed else "‚ùå –ù–µ –∞–∫—Ç–∏–≤–Ω–∞"
            await message.answer(
                f"üìÑ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n"
                f"üÜî ID: <code>{user.telegram_id}</code>\n"
                f"üë§ –ò–º—è: {user.full_name}\n"
                f"üìß Email: {user.email}\n\n"
                f"üìå –ü–æ–¥–ø–∏—Å–∫–∞:\n{status}\n"
                f"üí≥ –î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /buy"
            )
        else:
            await message.answer("–í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.")

@router.message(Command("buy"))
async def cmd_buy(message: Message):
    await message.answer("üõí –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ø–æ–∫—É–ø–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ (–ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ).")

@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    telegram_id = message.from_user.id

    async with async_session() as session:
        stmt = select(User).where(User.telegram_id == telegram_id)
        result = await session.execute(stmt)
        user = result.scalar_one_or_none()

        if user:
            await message.answer("üë§ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å ‚Äî /info")
            return

    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º—Å—è.\n–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é:")
    await state.set_state(Registration.full_name)
